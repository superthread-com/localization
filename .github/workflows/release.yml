name: release

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '**/*.ts'
      - '**/*.js'
      - '**/*.mjs'
      - '**/*.json'

# enforce single job concurrency since we need to push commits
concurrency:
  group: localization-release
  cancel-in-progress: false

env:
  GIT_AUTHOR_NAME: github-actions[bot]
  GIT_COMMITTER_NAME: github-actions[bot]
  GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://npm.pkg.github.com"
          scope: "@superthread-com"

      - name: Get current release details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(gh release view --json tagName --jq '.tagName' || echo "v0.0.0")
          echo "CURRENT_VERSION=$tag" >> $GITHUB_ENV

          current_commit=${{ github.sha }}
          release_commit=$(git rev-list -n 1 "${tag}" || echo "0000000000000000000000000000000000000000")
          if [ "$current_commit" = "$release_commit" ];
          then
            echo "IS_NEW_RELEASE=false" >> $GITHUB_ENV
          else
            echo "IS_NEW_RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Determine change type
        continue-on-error: true
        env:
          CM: ${{ github.event.head_commit.message }}
        run: |
          SANITIZED_MSG=$(echo "${CM}" | sed 's/`/\\`/g')
          COMMIT_MESSAGE=$(echo "${SANITIZED_MSG}" | sed 's/[^[:print:]]//g')
          if [[ "$COMMIT_MESSAGE" == *"[MAJOR]"* ]]; then
            CHANGE_TYPE="major"
          elif [[ "$COMMIT_MESSAGE" == *"[MINOR]"* ]]; then
            CHANGE_TYPE="minor"
          else
            CHANGE_TYPE="patch"
          fi
          echo "CHANGE_TYPE=$CHANGE_TYPE" >> $GITHUB_ENV

      - name: Determine new version
        run: |
          LATEST=${CURRENT_VERSION:-"0.0.0"}
          VERSION="${LATEST#v}"

          IFS='.' read -r -a semver <<< "$VERSION"
          major=${semver[0]}
          minor=${semver[1]}
          patch=${semver[2]}

          if [[ "$CHANGE_TYPE" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$CHANGE_TYPE" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="v$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "${NEW_VERSION}" --title="${NEW_VERSION}" --generate-notes

      - name: Create NPM release
        run: npm version "${NEW_VERSION}" --no-git-tag-version

      - name: Check for modified files
        id: git-check
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "MODIFIED=true" >> $GITHUB_OUTPUT
          else
            echo "MODIFIED=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish new version
        if: ${{ steps.git-check.outputs.MODIFIED == 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install --include=dev
          npm publish

      - name: Update version
        id: pr
        if: ${{ steps.git-check.outputs.MODIFIED == 'true' }}
        env:
          APP: localization
          HEAD: release-$NEW_VERSION
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout -b ${{ env.HEAD }}
          git add package.json
          git commit -m "[bot] ts release $APP $NEW_VERSION"
          git push --set-upstream origin ${{ env.HEAD }}
          url=$(gh pr create \
            --title '[bot] release $NEW_VERSION' \
            --body 'This PR bumps the version to $NEW_VERSION')
          echo "PR_URL=$(echo $url)" >> $GITHUB_ENV
          gh pr merge --auto --squash "$url"
